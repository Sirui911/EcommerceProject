package com.coseller.service.impl;

import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.coseller.domain.User;
import com.coseller.domain.security.PasswordResetToken;
import com.coseller.domain.security.UserRole;
import com.coseller.repository.PasswordResetTokenRepository;
import com.coseller.repository.RoleRepository;
import com.coseller.repository.UserRepository;
import com.coseller.service.UserService;

@Service
public class UserServiceImpl implements UserService{
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private PasswordResetTokenRepository passwordResetTokenRepository;
	
	@Autowired
	private RoleRepository roleRepository;
	
	@Override
    public PasswordResetToken getPasswordResetToken(final String token) {
    	return passwordResetTokenRepository.findByToken(token);
    }
    
    @Override 
    public void createPasswordResetTokenForUser(final User user, final String token) {
    	final PasswordResetToken myToken = new PasswordResetToken(token, user);
    	passwordResetTokenRepository.save(myToken);
    }
    
    @Override
    public User findByUsername(String username) {
    	return userRepository.findByUsername(username);
    }
    
    @Override
    public User findByEmail(String email) {
    	return userRepository.findByEmail(email);
    }
    
    @Override
    public User createUserRole(User user, Set<UserRole> userRoles) throws Exception{
    	User localUser = userRepository.findByUsername(user.getUsername());
    	
        if (localUser != null) {
        	throw new Exception("user is already exsits and nothing will be done!");
        }else {
        	for (UserRole ur : userRoles) {
        		roleRepository.save(ur.getRole());
        	}
        	
        	user.getUserRoles().addAll(userRoles);
        	
        	localUser = userRepository.save(user);
        }
        return localUser;
    }
}
 